{"version":3,"sources":["Card.js","CardList.js","robots.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","fbid","instaid","twitid","gitid","className","alt","src","CardList","robots","map","user","i","key","username","SearchBox","searchfield","searchChange","type","placeholders","onChange","App","onSearchChanges","event","setState","searchfields","target","value","state","this","filterrobots","filter","toLowerCase","includes","length","searchchange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40f3a1a7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nconst Card = (props) => {\r\n\tconst {id, name, email, fbid, instaid, twitid, gitid} = props;\r\n\treturn(\r\n\r\n\t\t<div className=\"bg-pink dib br3 grow pa3 ma2 shadow-5 tc\">\r\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n\treturn (\r\n\t\t<div>{\r\n\t   \t\trobots.map((user,i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\tfbid={robots[i].fbid} \r\n\t\t\t\t\tinstaid={robots[i].instaid} \r\n\t\t\t\t\ttwitid={robots[i].twitid}\r\n\t\t\t\t\tgitid={robots[i].gitid}\r\n\t\t\t\t\t/>);\r\n\t\t\t})\r\n\t   \t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","export const robots=[\r\n {\r\n    id:1,\r\n    name: 'Ravi Kumar',\r\n    username: 'Ravi',\r\n    email: 'ravibhai7812@gmail.com',\r\n    \r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Vishal Kumar',\r\n    username: 'Vishal',\r\n    email: 'vishalthathera378@gmail.com',\r\n   },\r\n    \r\n  {\r\n    id: 3,\r\n    name: 'Ashok Kumar',\r\n    username: 'Ashok',\r\n    email: 'anand123bxr@gmail.com',\r\n    \r\n  },\r\n   {\r\n    id: 4,\r\n    name: 'Anand Kumar',\r\n    username: 'Anand',\r\n    email: 'anand123bxr@gmail.com',\r\n    \r\n  },\r\n   {\r\n    id: 5,\r\n    name: 'Aashish',\r\n    username: 'Ashish',\r\n    email: 'ravibhai7812@gmail.com',\r\n    \r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Lal Babu Rai',\r\n    username: 'Lalu',\r\n    email: 'ravibhai7812@gmail.com',\r\n  \r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Satyadev Kumar',\r\n    username: 'Raj',\r\n    email: 'ravibhai7812@gmail.com',\r\n   \r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Rajan Kumar',\r\n    username: 'Big Bro',\r\n    email: 'ravibhai7812@gmail.com',\r\n   \r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Vishnu Dev Kumar',\r\n    username: 'Raj Kumar',\r\n    email: 'ravibhai7812@gmail.com',\r\n    \r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Divyom',\r\n    username: 'Dibbu',\r\n    email: 'ravibhai7812@gmail.com',\r\n   \r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'Himanshu Rai',\r\n    username: 'Hi-Man',\r\n    email: 'ravibhai7812@gmail.com',\r\n   \r\n  },\r\n  {\r\n    id: 12,\r\n    name: 'Alok Ranjan',\r\n    username: 'Rss',\r\n    email: 'ravibhai7812@gmail.com',\r\n   \r\n  },\r\n  {\r\n    id: 13,\r\n    name: 'Datul Kumar',\r\n    username: 'Ashu',\r\n    email: 'ravibhai7812@gmail.com',\r\n   \r\n  },\r\n  {\r\n    id: 14,\r\n    name: 'Ajay Kumar',\r\n    username: 'ChakraPani',\r\n    email: 'ravibhai7812@gmail.com',\r\n   \r\n  },\r\n  {\r\n    id: 15,\r\n    name: 'Shivam Singh',\r\n    username: 'Doggy',\r\n    email: 'ravibhai7812@gmail.com',\r\n   \r\n  }\r\n];","import React from 'react';\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className = ' tc pa2'>\r\n\r\n\t\t\t<input \r\n\t\t\t\tclassName='tc'\r\n\t\t\t\ttype ='search' \r\n\t\t\t\tplaceholders = 'search robots'\r\n\t\t\t\tonChange = {searchChange}/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport CardList from './CardList.js';\r\nimport { robots } from './robots';\r\nimport SearchBox from './SearchBox.js';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfields: ''\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\treturn this.setState({robots:robots})\r\n\t}\r\n\r\n\tonSearchChanges = (event) => {\r\n\t\tthis.setState({searchfields: event.target.value})\r\n\r\n\t\t\r\n\t}\r\n\trender(){\r\n\t\tconst { robots , searchfields } = this.state;\r\n\t\tconst filterrobots = robots.filter(robots => {\r\n\t\t\treturn (robots.name.toLowerCase().includes(searchfields.toLowerCase()));\r\n\t\t})\r\n\t\treturn !robots.length?\r\n\t\t<h1>Loading</h1> :\r\n\t\t(\r\n\t\t\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 >RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchchange={this.onSearchChanges}/>\r\n\t\t\t\t\r\n\t\t\t\t<CardList robots={filterrobots} />\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\t\t\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js'\nimport SearchBox from './SearchBox.js';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}